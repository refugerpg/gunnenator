  function comparison(array, index, weaponType) {

    compareDict = {};
    out = {};
    out.similar = [];

    function sweetComparisonLove(key, sourceDictionary) {
      if (core.comparisonBlacklist.indexOf(key.toString()) == -1) {
        if (!compareDict[key]) {
          compareDict[key] = {};
          compareDict[key].number = parseFloat(sourceDictionary[key]);
          compareDict[key].items = 1;
        } else if (sourceDictionary[key] !== undefined || !isNaN(sourceDictionary[key])){
          compareDict[key].number += parseFloat(sourceDictionary[key]);
          compareDict[key].items += 1;
        }
      }
    }

    var firstItem = core.calculate(array[index], weaponType, true);
    var firstHash = firstItem.compare;
    for (var firstItemKey in firstItem) {
      sweetComparisonLove(firstItemKey, firstItem);
    }

    for (var i=0; i < array.length; i++) {
      var item = core.calculate(array[i], weaponType, true);
      if (i !== index) {
        item.similarity = dice(item.compare, firstHash);
        out.similar.push(item);
      }
      for (var key in item) {
        sweetComparisonLove(key, item);
      }
      out.similar.sort( function(a,b) {
        if (a.similarity < b.similarity){
          return 1;
        } else if (a.similarity > b.similarity) {
          return -1;
        }
        return 0;
      });
      out.similar = out.similar.slice(0,5);
    }

    for (var comparison in compareDict) {
      var value = compareDict[comparison].number;
      var items = compareDict[comparison].items;
      out[comparison] = value / items;
    }

    return out;
  }

  core.stats = function(array) {
    statDict = {};
    function sweetStatisticLove(key, sourceDictionary) {
      if (core.statBlacklist.indexOf(key.toString()) == -1) {
        if (!statDict[key]) {
          statDict[key] = {};
          statDict[key].name = key;
          statDict[key].minValue = sourceDictionary[key];
          statDict[key].maxValue = sourceDictionary[key];
          statDict[key].minName = weaponName;
          statDict[key].maxName = weaponName;
        } else if (statDict[key].minValue > sourceDictionary[key]) {
          statDict[key].minValue = sourceDictionary[key];
          statDict[key].minName = weaponName;
        } else if (statDict[key].maxValue < sourceDictionary[key]) {
          statDict[key].maxValue = sourceDictionary[key];
          statDict[key].maxName = weaponName;
        }
      }
    }
    for (var i=0; i < array.length; i++) {
      for (var key in weapon) {
        sweetStatisticLove(key, weapon);
      }
    }
    return statDict;
  };

  core.statistics = function(weaponName, weapon, statDict) {
    function sweetStatisticLove(key, sourceDictionary) {
      if (core.statBlacklist.indexOf(key.toString()) == -1) {
        if (!statDict[key]) {
          statDict[key] = {};
          statDict[key].name = key;
          statDict[key].minValue = sourceDictionary[key];
          statDict[key].maxValue = sourceDictionary[key];
          statDict[key].minName = weaponName;
          statDict[key].maxName = weaponName;
        } else if (statDict[key].minValue > sourceDictionary[key]) {
          statDict[key].minValue = sourceDictionary[key];
          statDict[key].minName = weaponName;
        } else if (statDict[key].maxValue < sourceDictionary[key]) {
          statDict[key].maxValue = sourceDictionary[key];
          statDict[key].maxName = weaponName;
        }
      }
    }
    for (var key in weapon) {
      sweetStatisticLove(key, weapon);
    }
    return statDict;
  };
